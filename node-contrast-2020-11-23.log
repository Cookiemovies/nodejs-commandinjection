error: 2020-11-23T21:39:26.881Z 6228 contrast:rewrite - could not rewrite C:\Users\marti\Projects\nodejs-commandinjection\simpleServer.js
error: 2020-11-23T21:39:26.884Z 6228 contrast:hooks:module - Failed to compile rewritten code for C:\Users\marti\Projects\nodejs-commandinjection\simpleServer.js, err: C:\Users\marti\Projects\nodejs-commandinjection\simpleServer.js:121
  });  
   ^

SyntaxError: Unexpected token ')'
    at Module._compile (internal/modules/cjs/loader.js:892:18)
    at Module._compile (C:\Users\marti\Projects\nodejs-commandinjection\node_modules\@contrast\agent\lib.asar\hooks\module\index.js:48:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:973:10)
    at Object.Module._extensions..js (C:\Users\marti\Projects\nodejs-commandinjection\node_modules\@contrast\agent\lib.asar\hooks\module\index.js:75:16)
    at Module.load (internal/modules/cjs/loader.js:812:32)
    at Function.Module._load (internal/modules/cjs/loader.js:724:14)
    at Function.Module.runMain (internal/modules/cjs/loader.js:1025:10)
    at Function.Module.runMain (C:\Users\marti\Projects\nodejs-commandinjection\node_modules\@contrast\agent\bootstrap.js:35:8)
    at processTicksAndRejections (internal/process/task_queues.js:93:5) {
  [stack]: 'C:\\Users\\marti\\Projects\\nodejs-commandinjection\\simpleServer.js:121\n' +
    '  });  \n' +
    '   ^\n' +
    '\n' +
    "SyntaxError: Unexpected token ')'\n" +
    '    at Module._compile (internal/modules/cjs/loader.js:892:18)\n' +
    '    at Module._compile (C:\\Users\\marti\\Projects\\nodejs-commandinjection\\node_modules\\@contrast\\agent\\lib.asar\\hooks\\module\\index.js:48:30)\n' +
    '    at Object.Module._extensions..js (internal/modules/cjs/loader.js:973:10)\n' +
    '    at Object.Module._extensions..js (C:\\Users\\marti\\Projects\\nodejs-commandinjection\\node_modules\\@contrast\\agent\\lib.asar\\hooks\\module\\index.js:75:16)\n' +
    '    at Module.load (internal/modules/cjs/loader.js:812:32)\n' +
    '    at Function.Module._load (internal/modules/cjs/loader.js:724:14)\n' +
    '    at Function.Module.runMain (internal/modules/cjs/loader.js:1025:10)\n' +
    '    at Function.Module.runMain (C:\\Users\\marti\\Projects\\nodejs-commandinjection\\node_modules\\@contrast\\agent\\bootstrap.js:35:8)\n' +
    '    at processTicksAndRejections (internal/process/task_queues.js:93:5)',
  [message]: "Unexpected token ')'"
}, rewritten code var express = require('express')
var app = express()

const child_process = require('child_process');
app.disable("x-powered-by");

const htmlbody = '<html><body>';
const bodyhtml = '</body></html>';
const homepage = '<p><a href="http://localhost:3000/">BACK</a></p>';
const welcome = '<h1>Welcome to the code and SQL injection test</h1>';
const novalidation = "Filename could not be validated: ";
const fileoutput = 'Will output a file to console: ';
const possible = 'Possible Command Injection! ';
const problem = '<p>Problem: <a href="http://localhost:3000/outfile?filename=outputfile.txt|ls -a">http://localhost:3000/outfile?filename=outputfile.txt|ls -a</a></p>';
const safe1   = '<p>Safe 1: <a href="http://localhost:3000/outsafe?filename=outputfile.txt|ls%20-a">http://localhost:3000/outsafe?filename=outputfile.txt|ls -a</a></p>';
const safe2   = '<p>Safe 2: <a href="http://localhost:3000/outsafe?filename=outputfile.txt">http://localhost:3000/outsafe?filename=outputfile.txt</a></p>';
const sql     = '<p>SQL: <a href="http://localhost:3000/sql">http://localhost:3000/sql</a></p>';
const sqlinj  = '<p>SQL Injection: <a href="http://localhost:3000/sql?price=50">http://localhost:3000/sql?price=50</a></p>';

app.get('/', function (req, res) {
  res.send(htmlbody + welcome + problem + safe1 + safe2 + sql + sqlinj + bodyhtml)
})

app.get('/outfile', function (req, res) {

  child_process.exec(
      'cat ' + req.query.filename, (error, stdout, stderr) => {
        if (error) {
        console.log('error: ', error.messsage);
        return;
      }
      if (stderr) {
        console.log('stderr: ', stderr)
        return;
      }
      console.log('OUTPUT:\r\n', stdout);
    });
  res.send(htmlbody + '<h1>' + possible + '</h1><h1>' + fileoutput + req.query.filename + '</h1>' + homepage + bodyhtml)
});

app.get('/outsafe', function (req, res) {

  const filename = req.query.filename;

  if  (
      (filename.includes(",")) 
      || 
      (filename.includes(";"))
      || 
      (filename.includes("&"))
      || 
      (filename.includes("|"))
      ) {
        res.send(htmlbody + '<h1>' + novalidation + encodeURI(filename) + ' </h1>' + homepage + bodyhtml);
        console.log(novalidation + filename);
    return;
  }

  child_process.execFile(
      'cat', [filename], (error, stdout, stderr) => {
        if (error) {
        console.log('error: ', error.messsage)
        return;
      }
      if (stderr) {
        console.log('stderr: ', stderr)
        return;
      }
      console.log('OUTPUT:\r\n', stdout);
    });
  res.send(htmlbody + '<h1>' + fileoutput + encodeURI(filename) + ' </h1>' + homepage + bodyhtml) ;
});


//MSSQL Connection
var Connection = require('tedious').Connection;  
var Request = require('tedious').Request;  
var TYPES = require('tedious').TYPES;  

// const servername = 'COOKIE-LAPTOP\SQLEXPRESS';
const servername = 'localhost';
const database = 'Northwind';
const user = 'node';
const pass = 'node';

app.get('/sql', function (req, res) {

  var config = {  
      server: servername,
      authentication: {
          type: 'default',
          options: {
              userName: user,
              password: pass
          }
      },
      options: {
          encrypt: false,
          database: database,
          validateBulkLoadParameters: false
      }
  }; 

  var connection = new Connection(config);  

  var htmlhead = '<html><head><style>table { width:400pt; } table, th, td {border: 1px solid black; border-collapse: collapse; } th, td { padding: 15px ; text-align: middle; } #t01 tr:nth-child(even) { background-color: #eee; } #t01 tr:nth-child(odd) { background-color: #fff; } #t01 th { background-color: black; color: white; }</style></head><body>';
  var resultrows = '<table id="t01"><tr><th>ID</th><th>Product</th><th>UnitPrice</th></tr>' ;

  connection.connect(function(err) {  
      if (err) {
        console.log('ERROR IN LOGIN:' + err);
        res.send('<html><body><h1>ERROR IN LOGIN: ' + err + '</h1></body></html>');
      }
      else {
if (req.query.price == '') {
  readDB('50');
}
else {
  readDB(req.query.price);
}
  });  

  connection.on('debug', function(text) {
    console.log('DEBUG MESSAGE: ' + text);
  });

  function readDB(UnitPrice) {  
    var request = new Request('SELECT ProductID, ProductName, UnitPrice FROM Products WHERE UnitPrice > ' + UnitPrice + ';', function(err, rowCount) {  
      if (err) {  
          console.log('ERROR IN REQUEST:' + err);
      }  
      else { 
        console.log('Returned ' + rowCount + ' rows');
      }
      connection.close();
      res.send(htmlhead + '<h1>Northwind Products</h1>' + resultrows + '</table>' + bodyhtml);
    });  
    
var result = "<tr>";  

    console.log('REQUEST ON GETROWS');
    request.on('row', function(columns) {  
      columns.forEach(function(column) {  
        if (column.value === null) {  
          console.log('NULL');  
        } 
        else {  
          result+= '<td>' + column.value + '</td>';  
        }  
      });  
      resultrows += result + '</tr>';
      result ='<tr>';  
    });  

 request.on('done', function(rowCount, more) {  
      console.log(rowCount + ' rows returned');  
    });  
  connection.execSql(request);  
  }  
});  

app.listen(3000, function () {
  console.log('Node app listening on port 3000!')
})
, compiling original code.
error: 2020-11-23T21:39:26.882Z 6228 contrast:rewrite - rewrite error: 
error: 2020-11-23T21:39:26.883Z 6228 contrast:rewrite - Error: Line 121: Unexpected token )
    at ErrorHandler.constructError (C:\Users\marti\Projects\nodejs-commandinjection\node_modules\@contrast\esprima\dist\esprima.js:5266:22)
    at ErrorHandler.createError (C:\Users\marti\Projects\nodejs-commandinjection\node_modules\@contrast\esprima\dist\esprima.js:5282:27)
    at Parser.unexpectedTokenError (C:\Users\marti\Projects\nodejs-commandinjection\node_modules\@contrast\esprima\dist\esprima.js:2033:39)
    at Parser.throwUnexpectedToken (C:\Users\marti\Projects\nodejs-commandinjection\node_modules\@contrast\esprima\dist\esprima.js:2043:21)
    at Parser.parsePrimaryExpression (C:\Users\marti\Projects\nodejs-commandinjection\node_modules\@contrast\esprima\dist\esprima.js:2413:38)
    at Parser.inheritCoverGrammar (C:\Users\marti\Projects\nodejs-commandinjection\node_modules\@contrast\esprima\dist\esprima.js:2332:37)
    at Parser.parseLeftHandSideExpressionAllowCall (C:\Users\marti\Projects\nodejs-commandinjection\node_modules\@contrast\esprima\dist\esprima.js:2979:26)
    at Parser.inheritCoverGrammar (C:\Users\marti\Projects\nodejs-commandinjection\node_modules\@contrast\esprima\dist\esprima.js:2332:37)
    at Parser.parseUpdateExpression (C:\Users\marti\Projects\nodejs-commandinjection\node_modules\@contrast\esprima\dist\esprima.js:3127:26)
    at Parser.parseUnaryExpression (C:\Users\marti\Projects\nodejs-commandinjection\node_modules\@contrast\esprima\dist\esprima.js:3171:26)
